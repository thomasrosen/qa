// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DataType {
  String
  Number
  Boolean
  Thing /// a reference to a Thing
}

enum SchemaType {
  /// allowed/used schema.org types
  /// Thing /// is the default. just leave it empty
  Person /// for a user
  DefinedTerm /// for a word / job title / etc
}

// model Backup {
//   backup_id String   @id @default(cuid())
//   index     Int      @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   //
//   data      String /// encrypted stringified-json of the users data
//   name      String /// a name of the backup
// }

model Thing {
  /// similar to the schema.org Thing
  thing_id                 String      @id @default(cuid())
  index                    Int         @default(autoincrement())
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  //
  type                     SchemaType? /// empty is just a generic thing
  name                     String?
  locale                   String? /// any locale string
  sameAs                   String[] /// could a wikidata-url
  jsonld                   Json? /// JSON-LD: For a word/DefinedTerm this could contain a wikidata-id as the termCode. Or an email for a person.
  //
  Answer_isAnsweredByAgent Answer[]    @relation("Answer.isAnsweredByAgent")
  Answer_isAbout           Answer[]    @relation("Answer.isAbout")
  isUsedInValues           Value[]     @relation("Value.thing")
}

model Question {
  /// similar to the schema.org SearchAction
  question_id        String       @id @default(cuid())
  index              Int          @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  //
  question           String?
  description        String?
  locale             String? /// any locale string
  asProperty         String? /// if this question is a schema property, this would be the schema.org property name
  expectedValueType  DataType
  expectedThingTypes SchemaType[] /// if the expectedValueType is Thing, this would be the possible types of the thing
  //
  Answer_isAnswering Answer[]     @relation("Answer.isAnswering")
}

model Answer {
  /// similar to the schema.org FindAction
  answer_id            String   @id @default(cuid())
  index                Int      @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  //
  values               Value[]  @relation("Value.isValueFor")
  isAnswering          Question @relation("Answer.isAnswering", fields: [isAnswering_id], references: [question_id])
  isAnswering_id       String
  isAbout              Thing?   @relation("Answer.isAbout", fields: [isAbout_id], references: [thing_id]) /// could be a defined term or a person if answering about themselves
  isAbout_id           String?
  isAnsweredByAgent    Thing    @relation("Answer.isAnsweredByAgent", fields: [isAnsweredByAgent_id], references: [thing_id]) /// the person who answered
  isAnsweredByAgent_id String
}

model Value {
  value_id        String   @id @default(cuid())
  index           Int      @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  //
  valueType       DataType
  valueAsString   String?
  valueAsNumber   Float?
  valueAsBoolean  Boolean?
  valueAsThing    Thing?   @relation("Value.thing", fields: [valueAsThing_id], references: [thing_id])
  valueAsThing_id String?
  //
  isValueFor      Answer   @relation("Value.isValueFor", fields: [isValueFor_id], references: [answer_id])
  isValueFor_id   String
}
