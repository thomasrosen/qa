// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "postgresqlExtensions"]
}

// generator zod {
//   provider = "zod-prisma-types"
//   output   = "../src/generated/zod" // default is ./generated/zod
// }

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

// model Account {
//   id                String   @id @default(cuid())
//   index             Int      @default(autoincrement())
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   //
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?  @db.Text
//   access_token      String?  @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?  @db.Text
//   session_state     String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }
//
// model Session {
//   id           String   @id @default(cuid())
//   index        Int      @default(autoincrement())
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   //
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id              String     @id @default(cuid())
  index           Int        @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  //
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  //
  // accounts      Account[]
  // sessions      Session[]
  //
  // answers            Answer[]   @relation("Answer.isAnsweredByAgent")
  // publishedThings    Thing[]    @relation("Thing.publishedBy")
  // publishedQuestions Question[] @relation("Question.publishedBy")
  //
  createdQuestion Question[] @relation("Question.createdBy")
  createdThing    Thing[]    @relation("Thing.createdBy")
  createdAnswer   Answer[]   @relation("Answer.createdBy")
  createdValue    Value[]    @relation("Value.createdBy")
  createdContext  Context[]  @relation("Context.createdBy")
}

model VerificationToken {
  index      Int      @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DataType {
  String
  Number
  Boolean
  Thing /// a reference to a Thing
}

enum SchemaType {
  /// allowed/used schema.org types
  /// Thing /// is the default. just leave it empty
  Person /// for a user
  DefinedTerm /// for a word / job title / etc
  Country
  City
}

// model Backup {
//   backup_id String   @id @default(cuid())
//   index     Int      @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   //
//   data      String /// encrypted stringified-json of the users data
//   name      String /// a name of the backup
// }

model Thing {
  /// similar to the schema.org Thing
  thing_id           String      @id @default(cuid())
  index              Int         @default(autoincrement())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  createdBy          User        @relation("Thing.createdBy", fields: [createdBy_id], references: [id])
  createdBy_id       String
  //
  type               SchemaType? /// empty is just a generic thing
  name               String?
  locale             String? /// any locale string
  sameAs             String[] /// could a wikidata-url
  jsonld             Json? /// JSON-LD: For a word/DefinedTerm this could contain a wikidata-id as the termCode. Or an email for a person.
  canBeUsed          Boolean?    @default(false) /// if this thing can be used in anywhere in the app
  // publishedBy    User       @relation("Thing.publishedBy", fields: [publishedBy_id], references: [id])
  // publishedBy_id String
  //
  Context_aboutThing Context[]   @relation("Context.aboutThing")
  isUsedInValues     Value[]     @relation("Value.thing")
  isOptionFor        Question[]  @relation("Thing.isOptionFor")
}

/// @zod.refine(schema => schema.expectedValueType === 'Thing' ? schema.expectedThingTypes.length > 0 : true, { path: ['expectedThingTypes'], message: 'expectedThingTypes must be set when expectedValueType is Thing' })
model Question {
  /// similar to the schema.org SearchAction
  question_id        String       @id @default(cuid()) /// @zod.custom.omit([model, input])
  index              Int          @default(autoincrement()) /// @zod.custom.omit([model, input])
  createdAt          DateTime     @default(now()) /// @zod.custom.omit([model, input])
  updatedAt          DateTime     @updatedAt /// @zod.custom.omit([model, input])
  createdBy          User         @relation("Question.createdBy", fields: [createdBy_id], references: [id])
  createdBy_id       String
  //
  question           String? /// @zod.string.min(10, { message: 'Question must be at least 10 characters long.' })
  description        String?
  locale             String? /// any locale string /// @zod.string.min(2, { message: 'Locale must be at least 2 characters long.' })
  asProperty         String? /// if this question is a schema property, this would be the schema.org property name /// @zod.string.regex(/^([a-z]+(?:[A-Z][a-z]*)*)?$/, { message: 'asProperty must be a valid schema.org property name. These must be lowerCamelCase and only a-Z and A-Z are allowed.' })
  aboutThingTypes    SchemaType[]
  answerType         DataType
  answerThingTypes   SchemaType[] /// if the expectedAnswerType is Thing, this would be the possible types of this thing
  answerThingOptions Thing[]      @relation("Thing.isOptionFor") /// if the expectedAnswerType is Thing, this would be the possible options of this thing

  answerStringOptions  String[] /// if the expectedAnswerType is String, this would be the possible options of this
  allowCreateNewOption Boolean? @default(false) /// if the user can answer with their own answer
  //allowMultipleAnswers Boolean?   @default(false) /// if the user can answer with multiple answers

  canBeUsed          Boolean? @default(false) /// if this thing can be used in anywhere in the app
  // publishedBy        User        @relation("Question.publishedBy", fields: [publishedBy_id], references: [id])
  // publishedBy_id     String
  //
  Answer_isAnswering Answer[] @relation("Answer.isAnswering")
}

model Answer {
  /// similar to the schema.org FindAction
  answer_id      String    @id @default(cuid())
  index          Int       @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation("Answer.createdBy", fields: [createdBy_id], references: [id])
  createdBy_id   String
  //
  isAnswering    Question  @relation("Answer.isAnswering", fields: [isAnswering_id], references: [question_id])
  isAnswering_id String
  //
  context        Context[] @relation("Context.isContextFor") /// 
  values         Value[]   @relation("Value.isValueFor") /// the actual answers
  //
  // isAbout        Thing?   @relation("Answer.isAbout", fields: [isAbout_id], references: [thing_id]) /// could be a defined term or a person if answering about themselves
  // isAbout_id     String?
  // isAnsweredByAgent    User     @relation("Answer.isAnsweredByAgent", fields: [isAnsweredByAgent_id], references: [id]) /// the person who answered
  // isAnsweredByAgent_id String
}

model Value {
  value_id        String   @id @default(cuid())
  index           Int      @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User?    @relation("Value.createdBy", fields: [createdBy_id], references: [id])
  createdBy_id    String?
  //
  valueType       DataType
  valueAsString   String?
  valueAsNumber   Float?
  valueAsBoolean  Boolean?
  valueAsThing    Thing?   @relation("Value.thing", fields: [valueAsThing_id], references: [thing_id])
  valueAsThing_id String?
  //
  isValueFor      Answer   @relation("Value.isValueFor", fields: [isValueFor_id], references: [answer_id])
  isValueFor_id   String
}

model Context {
  context_id      String    @id @default(cuid())
  index           Int       @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       User?     @relation("Context.createdBy", fields: [createdBy_id], references: [id])
  createdBy_id    String?
  //
  time            DateTime? @default(now()) /// could be different from the createdAt
  geoJson         Json? /// any GeoJSON (point, polygon, etc)
  aboutThing      Thing?    @relation("Context.aboutThing", fields: [aboutThing_id], references: [thing_id]) /// could be a defined term or a person if answering about themselves
  aboutThing_id   String?
  //
  isContextFor    Answer    @relation("Context.isContextFor", fields: [isContextFor_id], references: [answer_id])
  isContextFor_id String
}

model OpenAiIndex {
  index     Int                          @default(autoincrement())
  createdAt DateTime                     @default(now())
  id        String                       @id @default(cuid())
  content   String
  embedding Unsupported("vector(1536)")?
  metadata  Json?

  @@map("OpenAiIndex")
}
