// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "zod-prisma-types"
//   output   = "../src/generated/zod" // default is ./generated/zod
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DataType {
  String
  Number
  Boolean
  Thing /// a reference to a Thing
}

enum SchemaType {
  /// allowed/used schema.org types
  /// Thing /// is the default. just leave it empty
  Person /// for a user
  DefinedTerm /// for a word / job title / etc
}

// model Backup {
//   backup_id String   @id @default(cuid())
//   index     Int      @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   //
//   data      String /// encrypted stringified-json of the users data
//   name      String /// a name of the backup
// }

model Person {
  person_id          String     @id @default(cuid())
  index              Int        @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  //
  isAnonymous        Boolean    @default(true) /// if the user is anonymous
  privateIdentifier  String?    @unique @default(cuid()) /// a private identifier for this thing. used for things like a user
  email              String?    @unique
  //
  answers            Answer[]   @relation("Answer.isAnsweredByAgent")
  publishedThings    Thing[]    @relation("Thing.publishedBy")
  publishedQuestions Question[] @relation("Question.publishedBy")
}

model Thing {
  /// similar to the schema.org Thing
  thing_id       String      @id @default(cuid())
  index          Int         @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  //
  type           SchemaType? /// empty is just a generic thing
  name           String?
  locale         String? /// any locale string
  sameAs         String[] /// could a wikidata-url
  jsonld         Json? /// JSON-LD: For a word/DefinedTerm this could contain a wikidata-id as the termCode. Or an email for a person.
  canBeUsed      Boolean?    @default(false) /// if this thing can be used in anywhere in the app
  publishedBy    Person?     @relation("Thing.publishedBy", fields: [publishedBy_id], references: [person_id])
  publishedBy_id String?
  //
  Answer_isAbout Answer[]    @relation("Answer.isAbout")
  isUsedInValues Value[]     @relation("Value.thing")
}

/// @zod.refine(schema => schema.expectedValueType === 'Thing' ? schema.expectedThingTypes.length > 0 : true, { path: ['expectedThingTypes'], message: 'expectedThingTypes must be set when expectedValueType is Thing' })
model Question {
  /// similar to the schema.org SearchAction
  question_id        String       @id @default(cuid()) /// @zod.custom.omit([model, input])
  index              Int          @default(autoincrement()) /// @zod.custom.omit([model, input])
  createdAt          DateTime     @default(now()) /// @zod.custom.omit([model, input])
  updatedAt          DateTime     @updatedAt /// @zod.custom.omit([model, input])
  //
  question           String? /// @zod.string.min(10, { message: 'Question must be at least 10 characters long.' })
  description        String?
  locale             String? /// any locale string /// @zod.string.min(2, { message: 'Locale must be at least 2 characters long.' })
  asProperty         String? /// if this question is a schema property, this would be the schema.org property name /// @zod.string.regex(/^([a-z]+(?:[A-Z][a-z]*)*)?$/, { message: 'asProperty must be a valid schema.org property name. These must be lowerCamelCase and only a-Z and A-Z are allowed.' })
  aboutThingTypes    SchemaType[]
  answerType         DataType
  answerThingTypes   SchemaType[] /// if the expectedAnswerType is Thing, this would be the possible types of this thing
  canBeUsed          Boolean?     @default(false) /// if this thing can be used in anywhere in the app
  publishedBy        Person?      @relation("Question.publishedBy", fields: [publishedBy_id], references: [person_id])
  publishedBy_id     String?
  //
  Answer_isAnswering Answer[]     @relation("Answer.isAnswering")
}

model Answer {
  /// similar to the schema.org FindAction
  answer_id            String   @id @default(cuid())
  index                Int      @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  //
  values               Value[]  @relation("Value.isValueFor")
  isAnswering          Question @relation("Answer.isAnswering", fields: [isAnswering_id], references: [question_id])
  isAnswering_id       String
  isAbout              Thing?   @relation("Answer.isAbout", fields: [isAbout_id], references: [thing_id]) /// could be a defined term or a person if answering about themselves
  isAbout_id           String?
  isAnsweredByAgent    Person   @relation("Answer.isAnsweredByAgent", fields: [isAnsweredByAgent_id], references: [person_id]) /// the person who answered
  isAnsweredByAgent_id String
}

model Value {
  value_id        String   @id @default(cuid())
  index           Int      @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  //
  valueType       DataType
  valueAsString   String?
  valueAsNumber   Float?
  valueAsBoolean  Boolean?
  valueAsThing    Thing?   @relation("Value.thing", fields: [valueAsThing_id], references: [thing_id])
  valueAsThing_id String?
  //
  isValueFor      Answer   @relation("Value.isValueFor", fields: [isValueFor_id], references: [answer_id])
  isValueFor_id   String
}
